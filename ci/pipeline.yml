---
meta:
  name:     (( param "Please name your pipeline" ))
  target:   (( param "Please identify the name of the target Concourse CI" ))
  url:      (( param "Please specify the full url of the target Concourse CI" ))
  pipeline: (( grab meta.name ))

  image:
    name: starkandwayne/concourse
    tag: latest

  aws:
    bucket:     (( grab meta.pipeline ))
    region_name: us-east-1
    access_key: (( param "Please set your AWS Access Key ID for your pipeline S3 Bucket" ))
    secret_key: (( param "Please set your AWS Secret Key ID for your pipeline S3 Bucket" ))

  git:
    email:  (( param "Please provide the git email for automated commits" ))
    name:   (( param "Please provide the git name for automated commits" ))

  github:
    uri:          (( concat "git@github.com:" meta.github.owner "/" meta.github.repo ))
    owner:        (( param "Please specify the name of the user / organization that owns the Github repository" ))
    repo:         (( param "Please specify the name of the Github repository" ))
    branch:       develop
    private_key:  (( param "Please generate an SSH Deployment Key for this repo and specify it here" ))
    access_token: (( param "Please generate a Personal Access Token to be used for creating github releases (do you have a ci-bot?)" ))

  bosh:
    target:     (( param "Please specify the BOSH target URI for the bosh to run test deployments against" ))
    cacert:     (( param "Please specify the BOSH Director Root CA cert" ))
    username:   admin
    password:   (( param "Please specify the BOSH Director admin password" ))

  # slack:
  #   webhook:       (( param "Please specify your Slack Incoming Webhook Integration URL" ))
  #   success_moji:  ":airplane_departure:"
  #   fail_moji:     ":airplane_arriving:"
  #   upset_moji:    ":sad_panda:"
  #   channel:       "#uaa"
  #   username:      starkandwayne-ci
  #   icon:          https://www.starkandwayne.com/assets/images/shield-blue-50x50.png
  #   fail_url: '(( concat "<" meta.url "/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME| Concourse Failure! " meta.slack.upset_moji ">" ))'

groups:
  - name: (( grab meta.pipeline ))
    jobs:
    - opsfiles
    - uaa-compile-release
    - os-conf-compile-release
    - postgres-compile-release

jobs:
- name: opsfiles
  public: true
  serial_groups: [testflight]
  plan:
    - do:
      - aggregate:
        - get: git
        - get: uaa-compiled-release
          passed: [uaa-compile-release]
        - get: os-conf-compiled-release
          passed: [os-conf-compile-release]
        - get: postgres-compiled-release
          passed: [postgres-compile-release]
        - get: ubuntu-trusty-stemcell
          trigger: true
          passed: [uaa-compile-release]
          params: {tarball: false}
      - task: update-manifest
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              repository: (( grab meta.image.name ))
              tag:        (( grab meta.image.tag ))
          inputs:
            - name: git
            - name: ubuntu-trusty-stemcell
              path: stemcell
            - name: uaa-compiled-release
            - name: os-conf-compiled-release
            - name: postgres-compiled-release
          outputs:
            - name: pushme
          run:
            path: git/ci/scripts/update-manifest
          params:
            REPO_ROOT: git
            REPO_OUT:  pushme
            REPO_OUT_BRANCH: develop
            GIT_EMAIL: (( grab meta.git.email ))
            GIT_NAME:  (( grab meta.git.name ))
      # - name: bosh-deploy-testflight
      #   put: bosh-deploy-testflight
      #   params:
      #     manifest: pushme/cfcr.yml
      #     ops_files:
      #     - git/ci/operators/testflight.yml
      #     - git/operators/rename.yml
      #     vars:
      #       deployment_name: cfcr-testflight
      #   on_failure:
      #     task: show-logs
      #     config:
      #       platform: linux
      #       image_resource:
      #         type: docker-image
      #         source:
      #           repository: (( grab meta.image.name ))
      #           tag:        (( grab meta.image.tag ))
      #       outputs:
      #         - name: pushme
      #       run:
      #         path: bosh
      #         args: [logs, --num, 200]
      #       params:
      #         BOSH_DEPLOYMENT:    cfcr-testflight
      #         BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
      #         BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
      #         BOSH_CLIENT:        (( grab meta.bosh.username ))
      #         BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
      - name: upload-git
        put: git
        params:
          rebase: true
          repository: pushme
      # ensure:
      #   put: bosh-deploy-testflight
      #   params:
      #     delete:
      #       enabled: true
      #       force:  true
      #     manifest: pushme/cfcr.yml
      #     ops_files:
      #     - git/ci/operators/testflight.yml
      #     - git/operators/rename.yml
      #     vars:
      #       deployment_name: cfcr-testflight

- name: uaa-compile-release
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: release
        resource: uaa-release
        trigger: true
      - get: ubuntu-trusty-stemcell
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell
            path: stemcell
          - name: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: uaa-compiled-release
      params:
        file: "compiled-release/uaa/*.tgz"

- name: os-conf-compile-release
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: release
        resource: os-conf-release
        trigger: true
      - get: ubuntu-trusty-stemcell
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell
            path: stemcell
          - name: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: os-conf-compiled-release
      params:
        file: "compiled-release/os-conf/*.tgz"

- name: postgres-compile-release
  public: true
  serial: true
  plan:
    - aggregate:
      - get: git
      - get: release
        resource: postgres-release
        trigger: true
      - get: ubuntu-trusty-stemcell
        params: {tarball: false}
    - task: export-release
      config:
        platform: linux
        image_resource:
          type: docker-image
          source:
            repository: (( grab meta.image.name ))
            tag:        (( grab meta.image.tag ))
        inputs:
          - name: git
          - name: ubuntu-trusty-stemcell
            path: stemcell
          - name: release
        outputs:
          - name: compiled-release
        run:
          path: git/ci/scripts/export-release
        params:
          BOSH_ENVIRONMENT:   (( grab meta.bosh.target ))
          BOSH_CA_CERT:       (( grab meta.bosh.cacert ))
          BOSH_CLIENT:        (( grab meta.bosh.username ))
          BOSH_CLIENT_SECRET: (( grab meta.bosh.password ))
          STEMCELL_CPI:       warden-boshlite
    - put: postgres-compiled-release
      params:
        file: "compiled-release/postgres/*.tgz"

resources:
  - name: git
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))

  - name: ubuntu-trusty-stemcell
    type: bosh-io-stemcell
    source:
      name: bosh-warden-boshlite-ubuntu-trusty-go_agent
      version_family: 3541.latest

  - name: uaa-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/uaa-release

  - name: uaa-compiled-release
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      regexp:            "uaa/.*-(\\d+).tgz"

  - name: os-conf-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/os-conf-release

  - name: os-conf-compiled-release
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      regexp:            "os-conf/.*-(\\d+).tgz"

  - name: postgres-release
    type: bosh-io-release
    source:
      repository: cloudfoundry/postgres-release

  - name: postgres-compiled-release
    type: s3
    source:
      bucket:            (( grab meta.aws.bucket ))
      region_name:       (( grab meta.aws.region_name ))
      access_key_id:     (( grab meta.aws.access_key ))
      secret_access_key: (( grab meta.aws.secret_key ))
      regexp:            "postgres/.*-(\\d+).tgz"

  # - name: notify
  #   type: slack-notification
  #   source:
  #     url: (( grab meta.slack.webhook ))

  # - name: github
  #   type: github-release
  #   source:
  #     user:         (( grab meta.github.owner ))
  #     repository:   (( grab meta.github.repo ))
  #     access_token: (( grab meta.github.access_token ))
